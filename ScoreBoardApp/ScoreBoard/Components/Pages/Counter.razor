@page "/counter"
@rendermode InteractiveServer

<PageTitle>Ongoing Matches</PageTitle>

<h1>Ongoing Matches</h1>

@* <p role="status">Current count: @currentCount</p> *@

@* <button class="btn btn-primary" @onclick="AddNewMatch">Add Another Section</button>
 *@
<div class="container text-center" id="scoreboard">
     @foreach (var match in matches)
    {
    <div class="input-group mb-3">
        <input type="text" class="form-control" @bind="match.CompName" placeholder="Enter league or competition name" name="comp-name" autocomplete="on" />
            <button class="btn btn-outline-primary" type="button" @onclick="() => ConfirmCompName(match)">Confirm</button>
    </div>
    <p><strong>@match.ConfirmedCompName</strong></p>
    <hr />

    <!-- Row for Team 1 and Team 2 -->
    <div class="row justify-content-center">

        <!-- Team 1 -->
        <div class="col-md-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" @bind="match.Team1Name" placeholder="Enter team name" name="team1-name" autocomplete="on" />
                <button class="btn btn-primary" type="button" @onclick="() => ConfirmTeamName1(match)">Confirm</button>
            </div>
            <p>@match.ConfirmedTeam1Name</p>
        </div>

            <!-- Team 1 Score Input -->
            <div class="col-md-1">
                    <input type="number" class="form-control" @bind="match.Team1Score" />
            </div>

            @* Dash *@
            <div class="col-md-1 text-center">
               <h2><strong>-</strong></h2>
            </div>

            <!-- Team 2 Score Input -->
            <div class="col-md-1">
                    <input type="number" class="form-control" @bind="match.Team2Score" />
            </div>

        <!-- Team 2 -->
        <div class="col-md-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" @bind="match.Team2Name" placeholder="Enter team name" name="team2-name" autocomplete="on" />
                <button class="btn btn-primary" type="button" @onclick="() => ConfirmTeamName2(match)">Confirm</button>
            </div>
            <p>@match.ConfirmedTeam2Name</p>
        </div>
    </div>
                                                              
    <p><strong>@match.Team1Score - @match.Team2Score</strong></p>

    <!-- Timer -->
    <div class="">
        <h2>@match.TimeElapsedString</h2>
        @if (match.IsHalfTime)
        {
            <h6 style="color: blue;"><strong>Half Time</strong></h6>
        }
    </div>

    <hr />

    }

    <div class="d-flex">
        <!-- Dropdown Menu -->
        <div class="me-3">
            <!-- Margin end (right) space between dropdown and table -->
            <div class="dropdown">
                <form action="">
                    <label for="leagues" class="form-label"></label>
                    <select class="form-select w-auto" id="leagueNames" name="leagues">
                        <option value="All" selected>All</option>
                        @foreach (var match in matches)
                        {
                            <option value="@match.ConfirmedCompName">@match.ConfirmedCompName</option>
                        }
                    </select>
                </form>
            </div>
        </div>

  <!-- Add Match Button -->
    <button class="btn btn-primary" @onclick="AddNewMatch">Add Match</button>
         <!-- Matches Table -->
        
            <table class="table table-hover mt-4">
                <thead>
                    <tr>
                        <th>League/Competition</th>
                        <th scope="col">Team 1</th>
                        <th scope="col">Scores</th>
                        <th scope="col">Team 2</th>
                    </tr>
                </thead>
                <tbody>             
                    @foreach (var match in matches)
                    {
                        <tr>
                            <th scope="row">@match.CompName</th>
                            <td>@match.Team1Name</td>
                            <td>@match.Team1Score - @match.Team2Score</td>
                            <td>@match.Team2Name</td>
                        </tr>
                    }
                </tbody>
            </table>
        
    </div>
</div>

@code {
    private List<Match> matches = new List<Match>();

    // private int currentCount = 0; 

    private void AddNewMatch()
    {
        matches.Add(new Match());
    }   

    private void ConfirmCompName(Match match)
    {
        match.ConfirmedCompName = match.CompName;
    }


    private void ConfirmTeamName1(Match match)
    {
        match.ConfirmedTeam1Name = match.Team1Name;
    }

    private void ConfirmTeamName2(Match match)
    {
        match.ConfirmedTeam2Name = match.Team2Name;
    }

    public class Match
    {
        // private int currentCount = 0;

        public string ConfirmedCompName { get; set; } = string.Empty;
        public string CompName { get; set; } = string.Empty;
        public string Team1Name { get; set; } = string.Empty;
        public string ConfirmedTeam1Name { get; set; } = string.Empty;
        public string Team2Name { get; set; } = string.Empty;
        public string ConfirmedTeam2Name { get; set; } = string.Empty;
        public int Team1Score { get; set; }
        public int Team2Score { get; set; }
        public TimeSpan TimeElapsed { get; set; } = TimeSpan.Zero;
        public string TimeElapsedString { get; set; } = "00:00";
        public bool IsHalfTime { get; set; } = false;
        public bool IsSecondHalf { get; set; } = false;
        public TimeSpan HalfTimeCountdown { get; set; } = TimeSpan.FromMinutes(15);
        private System.Timers.Timer? Timer { get; set; }
    
	// private string compName = "";
	// private string confirmedCompName = "";
	// private string teamName1 = "";
	// private string confirmedTeamName1 = "";
	// private string teamName2 = "";
	// private string confirmedTeamName2 = "";
	// private int team1score = 0;
	// private int team2score = 0;

	// private System.Timers.Timer? timer;

	// private bool isHalfTime = false;
	// private bool isSecondHalf = false;
	// private TimeSpan halfTimeCountdown = TimeSpan.FromMinutes(15);

	public Match()
	{
        Timer = new System.Timers.Timer(1000); // Tick every second
        Timer.Elapsed += OnTimerElapsed;
        Timer.Start();
	}

    private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
    {
        if (!IsHalfTime)
        {
            TimeElapsed = TimeElapsed.Add(TimeSpan.FromSeconds(1));

            if (TimeElapsed.TotalMinutes < 45)
            {
                TimeElapsedString = TimeElapsed.ToString(@"mm\:ss");
            }
            else
            {
                TimeElapsedString = "45:00";
                IsHalfTime = true;
            }
        }
        else if (IsHalfTime && !IsSecondHalf)
        {
            HalfTimeCountdown = HalfTimeCountdown.Subtract(TimeSpan.FromSeconds(1));

            if (HalfTimeCountdown.TotalSeconds > 0)
            {
                TimeElapsedString = HalfTimeCountdown.ToString(@"mm\:ss");
            }
            else
            {
                IsSecondHalf = true;
                TimeElapsed = TimeSpan.FromMinutes(45); // Start second half
            }
        }
        else if (IsSecondHalf)
        {
            TimeElapsed = TimeElapsed.Add(TimeSpan.FromSeconds(1));

            if (TimeElapsed.TotalMinutes < 90)
            {
                TimeElapsedString = TimeElapsed.ToString(@"mm\:ss");
            }
            else
            {
                TimeElapsedString = "90:00";
                Timer?.Stop();
            }
        }

  //       // Update the UI on each tick to reflect the new time
		// InvokeAsync(StateHasChanged);
	}

	// private void IncrementCount()
	// {
	// 	currentCount++;
	// }

    }

}

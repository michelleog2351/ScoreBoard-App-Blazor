@page "/counter"
@rendermode InteractiveServer

@inject IJSRuntime JS


<PageTitle>Ongoing Matches</PageTitle>

<h1><strong>Live Matches</strong></h1>
<h3 style="color: grey;">Today, @CurrentDateTime</h3>

<style>
    
    td img{
        width: 30px;
        height: 30px;
    }

    .sticky-add-match {
        position: fixed;
        bottom: 90px;
        right: 20px;
        z-index: 1000;
        background-color: #007bff; /* Blue background */
        padding: 0; /* Remove padding for better control */
        border-radius: 50%; /* Make the button circular */
        width: 60px; /* Smaller width */
        height: 60px; /* Smaller height to match width */
        font-size: 30px; /* Smaller font size */
        font-weight: bold;
        text-align: center; /* Horizontally center the plus sign */
        line-height: 60px; /* Vertically center the plus sign */
        transition: transform 0.3s ease, background-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition for the effects */
        cursor: pointer;
        overflow: hidden; /* Hide any overflow from text or effects */
    }

        .sticky-add-match:hover {
            background-color: #0056b3; /* Darker blue on hover */
            padding: 4px 4px 4px 4px; 
            width: 100px;
            transform: scale(1.1); /* Slightly increase the size */
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2); /* Add a shadow effect */
            border-radius: 5px;
        }

        .sticky-add-match:hover::before {
                content: 'Add Match'; /* Add the text on hover */
                font-size: 12px; /* Adjust the font size for the text */
        }

    .back-to-top {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
        background-color: #28a745; /* Green background */
        color: white; /* White text color */
        padding: 0;
        border-radius: 50%; /* Circular button */
        width: 60px; /* Smaller width */
        height: 60px; /* Smaller height to match width */
        font-size: 24px; /* Adjust font size for the caret symbol */
        font-weight: bold;
        text-align: center; /* Horizontally center the plus sign */
        line-height: 60px; /* Vertically center the caret symbol */
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease; /* Smooth transition for hover effects */
    }

        .back-to-top:hover {
            background-color: #218838; /* Darker green on hover */
            transform: scale(1.1); /* Slightly increase the size on hover */
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2); /* Add a shadow effect */
            border-radius: 5px; /* Square the corners when hovered */
        }

            .back-to-top:hover::before {
                content: 'Top'; /* Add the text on hover */
                font-size: 16px; /* Adjust the font size for the text */
            }

            .back-to-top:hover > * {
                display: none; /* Hide the symbol on hover */
            }

</style>
@* <p role="status">Current count: @currentCount</p> *@

@* <button class="btn btn-primary" @onclick="AddNewMatch">Add Another Section</button>
 *@

<div class="me-3">
    <!-- Margin end (right) space between dropdown and table -->
    <!-- Dropdown Menu for Filtering -->
    <div class="dropdown">
        <label for="leagueNames" class="form-label">Filter by League/Competition:</label>
        <select class="form-select" id="leagueNames" @onchange="FilterMatches">
            <option value="All">All</option>
            @foreach (var league in matches.Select(m => m.ConfirmedCompName).Distinct())
            {
                <option value="@league">@league</option>
            }
        </select>
    </div>

    <div class="d-flex">
        <!-- Matches Table -->

        <table class="table table-hover mt-4">
            <thead>
                <tr>
                    <th>#</th>
                    <th>League/Competition</th>
                    <th scope="col">Team 1</th>
                    <th scope="col">Scores</th>
                    <th scope="col">Team 2</th>
                </tr>
            </thead>
            <tbody>
                    @for (int i = 0; i < matches.Count; i++)
                    {
                        <tr>
                            <td><strong>@(i + 1)</strong></td> <!-- This will display the index starting from 1 -->
                            <td>@matches[i].CompName</td>
                            <td>@matches[i].Team1Name <img src="@GetTeamLogoUrl(matches[i].ConfirmedTeam1Name)" /></td>
                            <td>@matches[i].Team1Score - @matches[i].Team2Score</td>
                            <td><img src="@GetTeamLogoUrl(matches[i].ConfirmedTeam2Name)" /> @matches[i].Team2Name</td>
                    </tr>
                    }
            </tbody>
        </table>
    </div>
</div>

<div class="container text-center" id="scoreboard">
     @foreach (var match in matches)
    {
    <div class="input-group mb-3">
        <input type="text" class="form-control" @bind="match.CompName" placeholder="Enter league or competition name" name="comp-name" autocomplete="on" />
            <button class="btn btn-outline-primary" type="button" @onclick="() => ConfirmCompName(match)">Confirm</button>
    </div>
    <p>
                  
            <strong>@match.ConfirmedCompName</strong>
    </p>
    <hr />

    <!-- Row for Team 1 and Team 2 -->
    <div class="row justify-content-center">

        <!-- Team 1 -->
        <div class="col-md-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" @bind="match.Team1Name" placeholder="Enter team name" name="team1-name" autocomplete="on" />
                <button class="btn btn-primary" type="button" @onclick="() => ConfirmTeamName1(match)">Confirm</button>
            </div>
                <p>
                    @if (!string.IsNullOrEmpty(match.ConfirmedTeam1Name))
                    {
                        <img src="@GetTeamLogoUrl(match.ConfirmedTeam1Name)" alt="@match.ConfirmedTeam1Name Logo" style="width: 50px; height: 50px;" />
                    }
                </p>
            <p>@match.ConfirmedTeam1Name</p>
        </div>

            <!-- Team 1 Score Input -->
            <div class="col-md-1">
                    <h1><input type="number" class="form-control" @bind="match.Team1Score" /></h1>
            </div>

            @* Dash *@
            <div class="col-md-1 text-center">
               <h2><strong>-</strong></h2>
            </div>

            <!-- Team 2 Score Input -->
            <div class="col-md-1">
                    <input type="number" class="form-control" @bind="match.Team2Score" />
            </div>

        <!-- Team 2 -->
        <div class="col-md-4">
            <div class="input-group mb-3">
                <input type="text" class="form-control" @bind="match.Team2Name" placeholder="Enter team name" name="team2-name" autocomplete="on" />
                <button class="btn btn-primary" type="button" @onclick="() => ConfirmTeamName2(match)">Confirm</button>
            </div>

                <p>
                    @if (!string.IsNullOrEmpty(match.ConfirmedTeam2Name))
                    {
                        <img src="@GetTeamLogoUrl(match.ConfirmedTeam2Name)" alt="@match.ConfirmedTeam2Name Logo" style="width: 50px; height: 50px;" />
                    }
                </p>
            <p>@match.ConfirmedTeam2Name</p>
        </div>
    </div>
                                                              

    // Confirmed Team1 and Team2 scores
    <h2><strong>@match.Team1Score - @match.Team2Score</strong></h2>

    <!-- Timer -->
        <div class="match-period">
            <h6>@match.TimeElapsedString</h6>
            @if (match.IsFullTime)
            {
                <h6 style="color: red;"><strong>Full Time</strong></h6>
            }
            else if (match.IsHalfTime && !match.IsSecondHalf)
            {
                <h6 style="color: blue;"><strong>Half Time</strong></h6>
            }
        </div>
    <hr />

    }

  <!-- Add Match Button -->
        <button class="btn btn-primary sticky-add-match" @onclick="AddNewMatch">+</button>

        <!-- Add Back To Top Button -->
        <button class="btn btn-success back-to-top" @onclick="BackToTop">^</button>

    
</div>

@code {
    private string CurrentDateTime => DateTime.Now.ToString("MMMM dd yyyy, hh:mm:ss tt");
    private List<Match> matches = new List<Match>();
    private List<Match> filteredMatches => matches.Where(m => selectedLeague == "All" || m.ConfirmedCompName == selectedLeague).ToList();
    private string selectedLeague = "All";

    // private int currentCount = 0; 

    protected override void OnInitialized()
    {
        var timer = new System.Timers.Timer(1000); // 1 second interval
        timer.Elapsed += UpdateTime;
        timer.Start();
    }

    private void UpdateTime(object? sender, System.Timers.ElapsedEventArgs e)
    {
        InvokeAsync(StateHasChanged); // Force the component to re-render
    }

    private void AddNewMatch()
    {
        matches.Add(new Match());
    }

    private void BackToTop()
    {
        // Scroll to the top of the page
        JS.InvokeVoidAsync("window.scrollTo", new object[] { 0, 0 });
    }

    private string GetTeamLogoUrl(string teamName)
    {
        if (string.IsNullOrEmpty(teamName))
        {
            return "https://example.com/images/default-logo.png"; // Default image URL if no team name is provided
        }

        // Replace spaces with underscores and sanitize the name for use in a URL
        string sanitizedTeamName = teamName.Replace(" ", "_");
        string encodedTeamName = Uri.EscapeDataString(sanitizedTeamName); // Encode the name for URL

        // Construct the Wikipedia file URL
        return $"https://en.wikipedia.org/wiki/Special:Redirect/file/{encodedTeamName}.svg";
    }

    // private string GetTeamLogoUrl(string teamName)
    // {
    //     if (string.IsNullOrEmpty(teamName))
    //     {
    //         return "https://example.com/images/default-logo.png"; // Default image URL if no team name is provided
    //     }

    //     // Sanitize the input to match the expected URL format
    //     string sanitizedTeamName = teamName.Trim().Replace(" ", "_");
    //     string encodedTeamName = Uri.EscapeDataString(sanitizedTeamName);

    //     // Example Wikipedia URL patterns
    //     string[] possibleUrls = new[]
    //     {
    //     $"https://en.wikipedia.org/wiki/Special:Redirect/file/{encodedTeamName}_FC_badge.svg",
    //     $"https://en.wikipedia.org/wiki/Special:Redirect/file/{encodedTeamName}_CF_badge.svg",
    //     $"https://en.wikipedia.org/wiki/Special:Redirect/file/{encodedTeamName}_badge.svg",
    //     $"https://en.wikipedia.org/wiki/Special:Redirect/file/{encodedTeamName}_crest.svg",
    //     $"https://en.wikipedia.org/wiki/Special:Redirect/file/{encodedTeamName}_logo.svg"
    // };

    //     // Return the first valid URL
    //     foreach (var url in possibleUrls)
    //     {
    //         // Assuming here that you'd have a way to check if the URL is valid
    //         if (IsUrlValid(url))
    //         {
    //             return url;
    //         }
    //     }

    //     // Default image URL if none of the patterns match
    //     return "https://example.com/images/default-logo.png";
    // }

    // // This is a placeholder for a method that checks if the URL is valid.
    // // In a real implementation, you might perform a HEAD request to verify the URL exists.
    // private bool IsUrlValid(string url)
    // {
    //     // Logic to check if the URL is valid
    //     return true; // For now, assume it's valid
    // }


    // private string GetTeamLogoUrl(string teamName)
    // {
    //     if (string.IsNullOrEmpty(teamName))
    //     {
    //         return "https://example.com/images/default-logo.png"; // Default image URL if no team name is provided
    //     }

    //     // List of substrings to check
    //     string[] substrings = new[] { " FC", " CF", " badge", " crest", " logo" };

    //     // Initialize position to the length of the teamName (meaning no truncation if no substrings are found)
    //     int position = teamName.Length;

    //     // Check for each substring in the team name
    //     foreach (var substring in substrings)
    //     {
    //         int foundPosition = teamName.IndexOf(substring, StringComparison.OrdinalIgnoreCase);

    //         // Update position to the earliest found substring
    //         if (foundPosition != -1 && foundPosition < position)
    //         {
    //             position = foundPosition;
    //         }
    //     }

    //     // Truncate the team name at the position of the first found substring
    //     string truncatedTeamName = teamName.Substring(0, position).Trim();
    //     string sanitizedTeamName = truncatedTeamName.Replace(" ", "_");
    //     string encodedTeamName = Uri.EscapeDataString(sanitizedTeamName);

    //     // Construct the Wikipedia file URL
    //     return $"https://en.wikipedia.org/wiki/Special:Redirect/file/{encodedTeamName}.svg";
    // }

    private void FilterMatches(ChangeEventArgs e)
    {
        selectedLeague = e.Value?.ToString() ?? "All";
    }


    private void ConfirmCompName(Match match)
    {
        match.ConfirmedCompName = match.CompName;
    }


    private void ConfirmTeamName1(Match match)
    {
        match.ConfirmedTeam1Name = match.Team1Name;
    }

    private void ConfirmTeamName2(Match match)
    {
        match.ConfirmedTeam2Name = match.Team2Name;
    }

    public class Match
    {
        // private int currentCount = 0;

        public string ConfirmedCompName { get; set; } = string.Empty;
        public string CompName { get; set; } = string.Empty;
        public string Team1Name { get; set; } = string.Empty;
        public string ConfirmedTeam1Name { get; set; } = string.Empty;
        public string Team2Name { get; set; } = string.Empty;
        public string ConfirmedTeam2Name { get; set; } = string.Empty;
        public int Team1Score { get; set; }
        public int Team2Score { get; set; }
        public TimeSpan TimeElapsed { get; set; } = TimeSpan.Zero;
        public string TimeElapsedString { get; set; } = "00:00";
        public bool IsHalfTime { get; set; } = false;
        public bool IsSecondHalf { get; set; } = false;
        public bool IsFullTime { get; private set; } = false;
        public TimeSpan HalfTimeCountdown { get; set; } = TimeSpan.FromMinutes(15);
        private System.Timers.Timer? Timer { get; set; }

        public Match()
        {
            Timer = new System.Timers.Timer(1000); // Tick every second
            Timer.Elapsed += OnTimerElapsed;
            Timer.Start();
        }

        private void OnTimerElapsed(object? sender, System.Timers.ElapsedEventArgs e)
        {
            if (!IsHalfTime)
            {
                TimeElapsed = TimeElapsed.Add(TimeSpan.FromSeconds(1));

                if (TimeElapsed.TotalMinutes < 45)
                {
                    TimeElapsedString = TimeElapsed.ToString(@"mm\:ss");
                }
                else
                {
                    TimeElapsedString = "45:00";
                    IsHalfTime = true;
                }
            }
            else if (IsHalfTime && !IsSecondHalf)
            {
                HalfTimeCountdown = HalfTimeCountdown.Subtract(TimeSpan.FromSeconds(1));

                if (HalfTimeCountdown.TotalSeconds > 0)
                {
                    TimeElapsedString = HalfTimeCountdown.ToString(@"mm\:ss");
                }
                else
                {
                    IsSecondHalf = true;
                    TimeElapsed = TimeSpan.FromMinutes(45); // Start second half
                }
            }
            else if (IsSecondHalf)
            {
                TimeElapsed = TimeElapsed.Add(TimeSpan.FromSeconds(1));

                if (TimeElapsed.TotalMinutes < 90)
                {
                    TimeElapsedString = TimeElapsed.ToString(@"mm\:ss");
                }
                else
                {
                    TimeElapsedString = "90:00";
                    IsFullTime = true;
                    Timer?.Stop();
				}
			}
		}

		// private void IncrementCount()
		// {
		// 	currentCount++;
		// }

	}
}
